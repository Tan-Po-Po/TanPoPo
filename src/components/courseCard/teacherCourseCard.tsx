"use client";
import React from "react";
import { Typography } from "../typography/typography";
import { Checkbox } from "../checkbox/checkbox";
import { ContentCard } from "../contentCard/contentCard";
import { Select } from "../select/select";
import { getValidClassNames, parseCoursePrices } from "@/helpers";
import { ICourse } from "@/models/Course";
import Link from "next/link";
import { useRouter } from "next/navigation";
import { CourseState, setCourse } from "@/redux/slices/course/courseSlice";
import { useAppDispatch } from "@/redux/hooks";
import { toast } from "react-toastify";
import cl from "./courseCard.module.scss";

type Properties = {
  course: ICourse;
};

const typeClassMap = {
  teacher: cl.teacher,
  mega: cl.teacher,
  video: cl.video,
  audio: cl.audio,
  book: cl.book,
};

const TeacherCourseCard: React.FC<Properties> = ({ course }) => {
  const router = useRouter();
  const dispatch = useAppDispatch();
  const courseInfo = course.medium;
  const [isGift, setIsGift] = React.useState(false);
  const [isNewStudent, setIsNewStudent] = React.useState(true);
  const [isActiveStudent, setIsActiveStudent] = React.useState(false);
  const [cardState, setCardState] = React.useState<{
    learningFormat: "–ú—ñ–Ω—ñ-–≥—Ä—É–ø–∞" | "–Ü–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–æ" | null;
    lessons: null | string;
    link: null | string;
  }>({
    learningFormat: null,
    lessons: null,
    link: null,
  });

  const toggleGift = () => {
    setIsGift((prev) => !prev);
  };

  const handleNewStudentCheckbox = () => {
    if (isActiveStudent) setIsActiveStudent(false);
    setIsNewStudent((prev) => !prev);
  };

  const handleActiveStudentCheckbox = () => {
    if (isNewStudent) setIsNewStudent(false);
    setIsActiveStudent((prev) => !prev);
  };

  const handleClick = () => {
    if (!cardState.learningFormat || !cardState.lessons) {
      return toast("–°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å –§–æ—Ä–º–∞—Ç \n–ù–∞–≤—á–∞–Ω–Ω—è —Ç–∞ –ö-—Å—Ç—å —É—Ä–æ–∫—ñ–≤!üìö");
    }

    if (isActiveStudent && cardState.link) {
      return router.push(cardState.link);
    }

    const selectedCourse: Partial<CourseState> = {
      name: course.name,
      japanName: course.nameJapanese,
      format: cardState.learningFormat,
      lessons: +cardState.lessons.slice(0, 2).trim(),
      price: cardState.lessons.match(/\(([^)]+)\)/)![1],
      level: course.level[0],
      isGift,
    };

    dispatch(setCourse(selectedCourse));
    isGift ? router.push("/education/gift") : router.push("/education/start");
  };

  return (
    <ContentCard
      className={getValidClassNames(cl.card, typeClassMap[course.type])}
      label={
        <Link href={`courses/${course._id}`}>
          <Typography variant="h5" className={cl.name}>
            {course.name}
          </Typography>
          <Typography variant="body2" className={cl.nameJpn}>
            {course.nameJapanese}
          </Typography>
        </Link>
      }
      labelClassName={cl.header}
      labelBgColor={courseInfo.labelColor}
      labelPosition="top"
      cardBgColor={courseInfo.bgColor}
      width="385px"
      style={{ minHeight: 700 }}
    >
      <ul className={cl.description}>
        {courseInfo.description.map((desc, index) => (
          <li key={index}>
            <Typography className={cl.description} variant="body1">
              {desc}
            </Typography>
          </li>
        ))}
      </ul>
      <section className={cl.labels}>
        {course.labels.map((label, index) => (
          <Typography
            variant="body2"
            key={index}
            className={cl.label}
            style={{ background: courseInfo.labelColor }}
          >
            {label}
          </Typography>
        ))}
        <Typography
          variant="body2"
          className={cl.label}
          style={{ background: courseInfo.labelColor }}
        >
          –ú—ñ–Ω—ñ-–≥—Ä—É–ø–∞: 2 —Ä./—Ç–∏–∂–¥–µ–Ω—å <br />
          –Ü–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–æ: 1-3 —Ä./—Ç–∏–∂–¥–µ–Ω—å
        </Typography>
      </section>

      <Select
        className={cl.select}
        placeHolder="–§–æ—Ä–º–∞—Ç –Ω–∞–≤—á–∞–Ω–Ω—è"
        menuItems={[
          { value: "–ú—ñ–Ω—ñ-–≥—Ä—É–ø–∞", label: "–ú—ñ–Ω—ñ-–≥—Ä—É–ø–∞ (2-5 –æ—Å—ñ–±)" },
          { value: "–Ü–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–æ", label: "–Ü–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–æ (–∑ —Å–µ–Ω—Å–µ—î–º)" },
        ]}
        handleSelect={(value: string) =>
          setCardState((prev) => {
            return {
              ...prev,
              learningFormat: value as "–ú—ñ–Ω—ñ-–≥—Ä—É–ø–∞" | "–Ü–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–æ",
            };
          })
        }
      />

      <Select
        className={cl.select}
        placeHolder="–ö-—Å—Ç—å –£—Ä–æ–∫—ñ–≤ & –¶—ñ–Ω–∞"
        menuItems={
          cardState.learningFormat === "–Ü–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–æ"
            ? course.prices.individual.map((price, idx) => {
                return parseCoursePrices(price, idx);
              })
            : course.prices.group.map((price, idx) => {
                return parseCoursePrices(price, idx);
              })
        }
        handleSelect={(value: string, link?: string) =>
          setCardState((prev) => {
            return { ...prev, lessons: value, link: link as string };
          })
        }
        checkbox
        checkboxLabel="–ü–æ–¥–∞—Ä—É–Ω–∫–æ–≤–∏–π –°–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—ÇüéÅ"
        setGift={toggleGift}
        gift={isGift}
        isDisabled={cardState.learningFormat === null}
      />

      {isGift ? (
        <Checkbox
          label="–ü–æ–¥–∞—Ä—É–Ω–∫–æ–≤–∏–π –°–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—ÇüéÅ"
          onClick={toggleGift}
          isChecked={isGift}
        />
      ) : (
        cardState.learningFormat !== null &&
        cardState.lessons !== null && (
          <div>
            <Checkbox
              className={cl.checkbox}
              label="–Ø —Ä–æ–∑–ø–æ—á–∏–Ω–∞—é –æ–Ω–ª–∞–π–Ω-–∫—É—Ä—Å –∑
            —Å–µ–Ω—Å–µ—î–º —à–∫–æ–ª–∏ TanPoPo –≤–ø–µ—Ä—à–µ!"
              isChecked={isNewStudent}
              onClick={handleNewStudentCheckbox}
            />
            <div
              className={cl.divider}
              style={{ background: courseInfo.bgColor }}
            >
              <div className={cl.line}></div>
              <Typography variant="body2" className={cl.text}>
                –ê–±–æ
              </Typography>
              <div className={cl.line}></div>
            </div>
            <Checkbox
              className={cl.checkbox}
              label="–Ø –≤–∂–µ –º–∞—é —Ä–æ–∑–∫–ª–∞–¥ –∑–∞–Ω—è—Ç—å —Ç–∞
            –±–∞–∂–∞—é –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –Ω–∞–≤—á–∞–Ω–Ω—è!"
              isChecked={isActiveStudent}
              onClick={handleActiveStudentCheckbox}
            />
          </div>
        )
      )}
      <ContentCard
        className={getValidClassNames(
          cl.bottomBtn,
          isGift && cl.giftBtn,
          isNewStudent && cl.startBtn,
          !isGift && !isNewStudent && cl.continueBtn
        )}
        onClick={handleClick}
      >
        {isGift && (
          <Typography variant="body1">–ù–∞–≤—á–∞–Ω–Ω—è —É –ü–æ–¥–∞—Ä—É–Ω–æ–∫!</Typography>
        )}
        {!isGift && isNewStudent && (
          <Typography variant="body1">–†–æ–∑–ø–æ—á–∞—Ç–∏ –Ω–∞–≤—á–∞–Ω–Ω—è!</Typography>
        )}
        {!isGift && !isNewStudent && (
          <Typography variant="body1">–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –Ω–∞–≤—á–∞–Ω–Ω—è!</Typography>
        )}
      </ContentCard>
    </ContentCard>
  );
};

export { TeacherCourseCard };
