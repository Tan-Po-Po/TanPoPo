"use client";
import React from "react";
import { Typography } from "../typography/typography";
import { Checkbox } from "../checkbox/checkbox";
import { ContentCard } from "../contentCard/contentCard";
import { Select } from "../select/select";
import { getIconSrc, getValidClassNames } from "@/helpers";
import cl from "./courseCardDescription.module.scss";
import Image from "next/image";
import { ICourse } from "@/models/Course";

type Properties = {
  course: ICourse;
};

const typeClassMap = {
  teacher: cl.teacher,
  mega: [cl.teacher, cl.mega],
};

const TeacherCard: React.FC<Properties> = ({ course }) => {
  const courseInfo = course.large;
  const [isGift, setIsGift] = React.useState(false);
  const [isNewStudent, setIsNewStudent] = React.useState(false);
  const [isActiveStudent, setIsActiveStudent] = React.useState(false);
  const [cardState, setCardState] = React.useState<{
    learningFormat: null | string;
    lessons: null | string;
  }>({
    learningFormat: null,
    lessons: null,
  });

  const toggleGift = () => {
    setIsGift((prev) => !prev);
  };
  const handleNewStudentCheckbox = () => {
    if (isActiveStudent) setIsActiveStudent(false);
    setIsNewStudent((prev) => !prev);
  };
  const handleActiveStudentCheckbox = () => {
    if (isNewStudent) setIsNewStudent(false);
    setIsActiveStudent((prev) => !prev);
  };

  return (
    <ContentCard
      className={getValidClassNames(
        cl.card,
        typeClassMap[course.type as "teacher" | "mega"]
      )}
      label={
        <>
          <Typography variant="h5" className={cl.name}>
            {course.name}
          </Typography>
          <Typography variant="body2" className={cl.nameJpn}>
            {course.nameJapanese}
          </Typography>
        </>
      }
      labelClassName={cl.header}
      labelBgColor={courseInfo.labelColor}
      cardBgColor={courseInfo.bgColor}
      labelPosition="top"
      width={"1065px"}
    >
      <Typography variant="h3"> –¢–≤–æ—ó —Å–∫—ñ–ª–∏ –ø—ñ—Å–ª—è –∑–∞—Å–≤–æ—î–Ω–Ω—è –∫—É—Ä—Å—É:</Typography>
      <div className={cl.description}>
        {courseInfo.description.map((item, index) => {
          const { icon, text } = item as { icon: string; text: string };
          return (
            <div key={index} className={cl.descItem}>
              <Image src={getIconSrc(icon)} alt={icon} width={26} height={26} />
              <Typography variant="body2">{text}</Typography>
            </div>
          );
        })}
      </div>

      <div className={cl.labels}>
        {course.labels.concat(courseInfo.labels).map((item, index) => (
          <div
            className={cl.label}
            key={index}
            style={{ background: courseInfo.labelColor }}
          >
            {item}
          </div>
        ))}
      </div>

      <div className={cl.selects}>
        <Select
          className={cl.select}
          placeHolder="–§–æ—Ä–º–∞—Ç –Ω–∞–≤—á–∞–Ω–Ω—è"
          menuItems={[
            { value: "–ú—ñ–Ω—ñ-–≥—Ä—É–ø–∞", label: "–ú—ñ–Ω—ñ-–≥—Ä—É–ø–∞ (2-5 –æ—Å—ñ–±)" },
            { value: "–Ü–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–æ", label: "–Ü–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–æ (–∑ —Å–µ–Ω—Å–µ—î–º)" },
          ]}
          handleSelect={(value: string) =>
            setCardState((prev) => {
              return { ...prev, learningFormat: value };
            })
          }
        />

        <Select
          className={cl.select}
          placeHolder="–ö-—Å—Ç—å –£—Ä–æ–∫—ñ–≤ & –¶—ñ–Ω–∞"
          menuItems={course.prices.map((price, idx) => {
            return {
              label: (
                <Typography variant="body2">
                  {price.lessons} {idx === 0 ? "—É—Ä–æ–∫–∏" : "—É—Ä–æ–∫—ñ–≤"} (
                  {price.price}
                  –≥—Ä–Ω){" "}
                  <span className={cl.greyText}>
                    ({Math.round(price.price / price.lessons)}–≥—Ä–Ω)
                  </span>
                </Typography>
              ),
              value: `${price.lessons} ${idx === 0 ? "—É—Ä–æ–∫–∏" : "—É—Ä–æ–∫—ñ–≤"} (${
                price.price
              })`,
            };
          })}
          handleSelect={(value: string) =>
            setCardState((prev) => {
              return { ...prev, lessons: value };
            })
          }
          checkbox
          checkboxLabel="–ü–æ–¥–∞—Ä—É–Ω–∫–æ–≤–∏–π –°–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—ÇüéÅ"
          setGift={toggleGift}
          gift={isGift}
          isDisabled={cardState.learningFormat === null}
        />
      </div>

      <div className={cl.checkboxes}>
        {isGift ? (
          <Checkbox
            label="–ü–æ–¥–∞—Ä—É–Ω–∫–æ–≤–∏–π –°–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—ÇüéÅ"
            onClick={toggleGift}
            isChecked={isGift}
          />
        ) : (
          cardState.learningFormat !== null &&
          cardState.lessons !== null && (
            <div>
              <Checkbox
                className={cl.checkbox}
                label="–Ø —Ä–æ–∑–ø–æ—á–∏–Ω–∞—é –æ–Ω–ª–∞–π–Ω-–∫—É—Ä—Å –∑
            —Å–µ–Ω—Å–µ—î–º —à–∫–æ–ª–∏ TanPoPo –≤–ø–µ—Ä—à–µ!"
                isChecked={isNewStudent}
                onClick={handleNewStudentCheckbox}
              />
              <div
                className={cl.divider}
                style={{ background: courseInfo.bgColor }}
              >
                <div className={cl.line}></div>
                <Typography variant="body2" className={cl.text}>
                  –ê–±–æ
                </Typography>
                <div className={cl.line}></div>
              </div>
              <Checkbox
                className={cl.checkbox}
                label="–Ø –≤–∂–µ –º–∞—é —Ä–æ–∑–∫–ª–∞–¥ –∑–∞–Ω—è—Ç—å —Ç–∞
            –±–∞–∂–∞—é –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –Ω–∞–≤—á–∞–Ω–Ω—è!"
                isChecked={isActiveStudent}
                onClick={handleActiveStudentCheckbox}
              />
            </div>
          )
        )}
      </div>

      <ContentCard
        className={getValidClassNames(
          cl.bottomBtn,
          isGift && cl.giftBtn,
          isNewStudent && cl.startBtn,
          !isGift && !isNewStudent && cl.continueBtn
        )}
      >
        {isGift && (
          <Typography variant="body1">–ù–∞–≤—á–∞–Ω–Ω—è —É –ü–æ–¥–∞—Ä—É–Ω–æ–∫!</Typography>
        )}
        {!isGift && isNewStudent && (
          <Typography variant="body1">–†–æ–∑–ø–æ—á–∞—Ç–∏ –Ω–∞–≤—á–∞–Ω–Ω—è!</Typography>
        )}
        {!isGift && !isNewStudent && (
          <Typography variant="body1">–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –Ω–∞–≤—á–∞–Ω–Ω—è!</Typography>
        )}
      </ContentCard>
    </ContentCard>
  );
};

export { TeacherCard };
