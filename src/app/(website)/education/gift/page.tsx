"use client";

import { useState, useEffect, useRef } from "react";
import {
  AddressForm,
  Button,
  Checkbox,
  ContentCard,
  ContactForm,
  Divider,
  Typography,
  Select,
  Certificates,
  Loading,
} from "@/components";
import { getIconArtSrc, getValidClassNames } from "@/helpers";
import { Controller, useForm } from "react-hook-form";
import { toast } from "react-toastify";
import Image from "next/image";
import cl from "./page.module.scss";
import Link from "next/link";
import { useRouter } from "next/navigation";
import { useAppDispatch, useAppSelector } from "@/redux/hooks";
import {
  clearCourse,
  selectCourse,
  setCourse,
} from "@/redux/slices/course/courseSlice";
import { type FormData } from "@/components/orderForm/formData";
import {
  selectDeliveryInfo,
  setDeliveryInfo,
} from "@/redux/slices/deliveryInfo/deliveryInfoSlice";

export default function Page() {
  const dispatch = useAppDispatch();
  const router = useRouter();
  const course = useAppSelector(selectCourse);
  const deliveryInfo = useAppSelector(selectDeliveryInfo);

  const formReturn = useForm<FormData>({
    defaultValues: {
      ...deliveryInfo,
      certificateType: course.certificateType,
      agreement: false,
    },
    reValidateMode: "onSubmit",
  });
  const {
    watch,
    handleSubmit,
    control,
    setValue,
    getValues,
    trigger,
    formState: { errors, isDirty },
  } = formReturn;

  const [loading, setLoading] = useState(false);
  const [showErrors, setShowErrors] = useState(false);
  const certificateType = watch("certificateType");

  useEffect(() => {
    document.title = "–ù–∞–≤—á–∞–Ω–Ω—è —É –ø–æ–¥–∞—Ä—É–Ω–æ–∫ | TanPoPo";
  }, []);

  useEffect(() => {
    if (showErrors && errors) {
      if (!isDirty && !getValues("name")) {
        toast("–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –≤–∞—à—ñ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ñ –¥–∞–Ω—ñ‚òëÔ∏è", {
          toastId: "contactInfo",
        });
        setShowErrors(false);
        return;
      }

      for (const error of Object.values(errors)) {
        if (error.message) {
          toast(error.message);
          break;
        }
      }

      setShowErrors(false);
    }
  }, [errors, showErrors, isDirty, getValues]);

  const onSubmit = (formData: FormData) => {
    let price = course.price;
    if (certificateType === "–î—Ä—É–∫–æ–≤–∞–Ω–∏–π —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç") {
      price = `${+course?.price?.split(" ")[0]! + 200} –≥—Ä–Ω`;
    }

    dispatch(
      setCourse({
        certificateType: formData.certificateType,
        price,
      })
    );
    const deliveryInfo: Partial<FormData> = { ...formData };
    delete deliveryInfo.agreement;
    dispatch(setDeliveryInfo(deliveryInfo));
    const data = { ...course, price, ...formData, courseName: course.name };

    setLoading(true);
    scrollTo(0, 0);
    // Just save order in google sheets and generate monopay link
    fetch("/api/gift", {
      method: "POST",
      body: JSON.stringify(data),
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
    })
      .then(async (res) => {
        const responseData = await res.json();
        if (res.status === 422) {
          dispatch(clearCourse());
          toast(responseData.message);
          return setTimeout(() => router.push("/prices"), 3000);
        }

        if (!res.ok) {
          setLoading(false);
          return toast("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ");
        }

        dispatch(
          setCourse({
            invoiceId: responseData.invoiceId,
            monopayLink: responseData.monopayLink,
          })
        );
        router.push("/education/payment");
      })
      .catch(() => {
        setLoading(false);
        toast(
          "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —Ä–æ–∑–∫–ª–∞–¥—É, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ"
        );
      });
  };

  const handleClick = async () => {
    await trigger();
    setShowErrors(true);
  };

  if (loading) {
    return <Loading />;
  }

  return (
    <main className={cl.main}>
      <div className={cl.header}>
        <Typography variant="h4">–ù–∞–≤—á–∞–Ω–Ω—è —É –ø–æ–¥–∞—Ä—É–Ω–æ–∫üéÅ</Typography>
        <Typography variant="h6" style={{ maxWidth: "660px" }}>
          {" "}
          –û—Ñ–æ—Ä–º—ñ—Ç—å –ø–æ–¥–∞—Ä—É–Ω–∫–æ–≤–∏–π —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç –¥–ª—è –æ–±—Ä–∞–Ω–æ–≥–æ –∫—É—Ä—Å—É –Ω–∞ –Ω–∞—à–æ–º—É —Å–∞–π—Ç—ñ
          –ø—Ä—è–º–æ –∑–∞—Ä–∞–∑:
        </Typography>
      </div>

      <div className={cl.steps}>
        <ContentCard
          className={cl.step}
          width="365px"
          height="365px"
          index={1}
          indexBgColor="#C8F2FF"
          cardBgColor="linear-gradient(180deg, rgba(255, 255, 255, 0.00) 35.94%, #C8F2FF 100%)"
        >
          <Typography variant="h6">
            –ó–∞–ø–æ–≤–Ω—ñ—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ñ –¥–∞–Ω—ñ —Ç–∞ –æ–±–µ—Ä—ñ—Ç—å –≤–∏–¥ —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç—É.
          </Typography>
          <Image
            alt="Notepad icon"
            src={getIconArtSrc("calligraphy")}
            width={109}
            height={89}
          />
          <Typography variant="body2">
            –ü—Ä–æ—Ö–æ–¥—å—Ç–µ —à–≤–∏–¥–∫–µ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∏—Ö –¥–∞–Ω–∏—Ö, –æ–±–∏—Ä–∞–π—Ç–µ
            –≤–∏–¥ –ø–æ–¥–∞—Ä—É–Ω–∫–æ–≤–æ–≥–æ —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç—É —Ç–∞ –æ–∑–Ω–∞–π–æ–º—Ç–µ—Å—å —ñ–∑ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—é
            —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é.
          </Typography>
        </ContentCard>

        <ContentCard
          className={cl.step}
          width="365px"
          height="365px"
          index={2}
          indexBgColor="#C9FFC8"
          cardBgColor="linear-gradient(180deg, rgba(255, 255, 255, 0.00) 35.94%, #C9FFC8 100%)"
        >
          <Typography variant="h6">
            {"–û–ø–ª–∞—Ç—ñ—Ç—å –æ–±—Ä–∞–Ω–∏–π\n–∫—É—Ä—Å —Ç–∞ –æ—Ç—Ä–∏–º–∞–π—Ç–µ\n–≤–∞—à —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç!"}
          </Typography>
          <Image
            alt="Certificate icon"
            src={getIconArtSrc("certificate4")}
            width={112}
            height={83}
          />
          <Typography variant="body2">
            –ü—Ä–æ—Ç—è–≥–æ–º –¥–Ω—è –∑ –º–æ–º–µ–Ω—Ç—É —É—Å–ø—ñ—à–Ω–æ—ó –æ–ø–ª–∞—Ç–∏ –º–∏ –Ω–∞–¥—ñ—à–ª–µ–º–æ –≤–∞—à –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∏–π
            –ø–æ–¥–∞—Ä—É–Ω–∫–æ–≤–∏–π —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç —Ç–∞ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –æ–±—Ä–∞–Ω–æ–≥–æ –∫—É—Ä—Å—É!
          </Typography>
        </ContentCard>
      </div>

      <Divider
        className={getValidClassNames(cl.divider, cl.dividerFixed)}
        firstRow={"1. –ó–∞–ø–æ–≤–Ω—ñ—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ñ –¥–∞–Ω—ñ \n—Ç–∞ –æ–±–µ—Ä—ñ—Ç—å –≤–∏–¥ —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç—É."}
        bgColor="linear-gradient(180deg, #FFE352 0%, #FFED72 70%)"
      />

      <form className={cl.form} onSubmit={handleSubmit(onSubmit)}>
        <ContactForm formReturn={formReturn} isCertificate />

        <Certificates header={1} className={cl.certificate} />

        <Controller
          name="certificateType"
          control={control}
          rules={{
            required: "–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –≤–∏–¥ —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç—É",
          }}
          render={({ field }) => (
            <Select
              {...field}
              className={cl.selectType}
              menuItems={["–ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∏–π —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç", "–î—Ä—É–∫–æ–≤–∞–Ω–∏–π —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç"]}
              placeHolder={
                certificateType ? certificateType : "–í–∏–¥ —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç—É"
              }
              setValue={setValue}
              name="certificateType"
            />
          )}
        />

        {certificateType === "–î—Ä—É–∫–æ–≤–∞–Ω–∏–π —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç" && (
          <AddressForm formReturn={formReturn} isCertificate />
        )}

        <ContentCard className={cl.important}>
          <Typography variant="body2" style={{ fontWeight: 700 }}>
            –î–µ–∫—ñ–ª—å–∫–∞ –≤–∞–∂–ª–∏–≤–∏—Ö –ø–∞–º‚Äô—è—Ç–æ–∫ —Å—Ç–æ—Å–æ–≤–Ω–æ –ø—Ä–æ–º–æ–∫–æ–¥—É –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –∫—É—Ä—Å—É:
          </Typography>
          <ul className={cl.list}>
            <li>
              <Typography variant="subtitle1">
                –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏–π –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø—ñ—Å–ª—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó
                –∫—É—Ä—Å—É.
              </Typography>
            </li>
            <li>
              <Typography variant="subtitle1">
                –ü—Ä–æ–º–æ–∫–æ–¥ –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –ø—Ä–æ—Ç—è–≥–æ–º 1 —Ä–æ–∫—É –∑ –º–æ–º–µ–Ω—Ç—É –π–æ–≥–æ
                –Ω–∞–¥–∞–Ω–Ω—è.
              </Typography>
            </li>
            <li>
              <Typography variant="subtitle1">
                –ü—Ä–æ–º–æ–∫–æ–¥ –¥—ñ—î –ª–∏—à–µ –Ω–∞ –æ–±—Ä–∞–Ω–∏–π –∫—É—Ä—Å –∑ –∑–∞–∑–Ω–∞—á–µ–Ω–∏–º —Ñ–æ—Ä–º–∞—Ç–æ–º —Ç–∞ –∫-—Å—Ç—é
                –∑–∞–Ω—è—Ç—å.
              </Typography>
            </li>
          </ul>
          <Image
            className={cl.image}
            src="/images/laptop.png"
            alt="Laptop"
            width={332}
            height={172}
            style={{ width: "332px", maxWidth: "100%", height: "auto" }}
          />
          <Typography
            variant="body2"
            style={{ fontSize: "18px", fontWeight: 600 }}
            className={cl.p}
          >
            –ê–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –∫—É—Ä—Å –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –ø–æ–¥–∞—Ä—É–Ω–∫–æ–≤–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥—É –¥—É–∂–µ
            –ª–µ–≥–∫–æ!–°–ø–µ—Ü—ñ–∞–ª—å–Ω–æ –¥–ª—è —Ü—å–æ–≥–æ –º–∏ –∑–∞–ø–∏—Å–∞–ª–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –≤—ñ–¥–µ–æ–≥–∞–π–¥ –ø–æ
            –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –∫—É—Ä—Å—É, —è–∫–∏–π –∑–∞–≤–∂–¥–∏ –º–æ–∂–Ω–∞ –∑–Ω–∞–π—Ç–∏ –Ω–∞ –Ω–∞—à—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
            ‚Äú–ö–æ–Ω—Ç–∞–∫—Ç–∏‚Äù.
          </Typography>
        </ContentCard>

        <div className={cl.agreement}>
          <Controller
            name="agreement"
            control={control}
            rules={{
              required:
                "–©–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏, –ø—Ä–∏–π–º—ñ—Ç—å\n—É–º–æ–≤–∏ –ü—É–±–ª—ñ—á–Ω–æ—ó –û—Ñ–µ—Ä—Ç–∏ —Ç–∞ \n–ü–æ–ª—ñ—Ç–∏–∫—É –ö–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω–æ—Å—Ç—ñ!‚òë",
            }}
            render={({ field }) => (
              <Checkbox
                {...field}
                className={cl.checkbox}
                isChecked={field.value}
                onChange={(e) => field.onChange(e.target.checked)}
              />
            )}
          />

          <Typography variant="subtitle1">
            –ü—Ä–æ–¥–æ–≤–∂—É—é—á–∏, –Ø –ø—Ä–∏–π–º–∞—é —É–º–æ–≤–∏{" "}
            <Link target="_blank" href="/contacts/oferta">
              <u>–ü—É–±–ª—ñ—á–Ω–æ—ó {"\n"}–û—Ñ–µ—Ä—Ç–∏</u>
            </Link>{" "}
            —Ç–∞{" "}
            <Link target="_blank" href="/contacts/confidentialityPolicy">
              <u>–ü–æ–ª—ñ—Ç–∏–∫–∏ –ö–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω–æ—Å—Ç—ñ</u>.
            </Link>
          </Typography>
        </div>

        <div className={cl.continue}>
          <div className={cl.line}></div>

          <Button
            className={cl.btn}
            icon="triangleButtonRight"
            variant="outlined"
            type="submit"
            onClick={handleClick}
          >
            –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏
          </Button>
        </div>
      </form>
    </main>
  );
}
